[debug] > Exec(;reload; set _root_.org.jetbrains.sbt.StructureKeys.sbtStructureOptions in Global := "download resolveClassifiers resolveSbtClassifiers" ;*/*:dumpStructureTo C:/Users/SAK/AppData/Local/Temp/sbt-structure.xml; session clear-all ; set ideaPort in Global := 57722, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.4.7 (AdoptOpenJDK Java 11.0.10)
[debug]       Load.loadUnit: plugins took 36797.6251ms
[debug]       Load.loadUnit: defsScala took 0.0171ms
[debug] [Loading] Scanning directory C:\Users\SAK\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\SAK\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3945.2692 ms
[debug]           Load.resolveProject(global-plugins) took 3993.0022ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\SAK\.sbt\1.0\plugins, plugins: List(<none>))) took 9916.806ms
[debug] [Loading] Done in C:\Users\SAK\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 14159.8016ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.1688ms
[debug]     Load.loadUnit(file:/C:/Users/SAK/.sbt/1.0/plugins/, ...) took 52584.0028ms
[debug]   Load.apply: load took 57458.7883ms
[debug]   Load.apply: resolveProjects took 887.5288ms
[debug]   Load.apply: finalTransforms took 6107.5067ms
[debug]   Load.apply: config.delegates took 505.889ms
[debug]   Load.apply: Def.make(settings)... took 50520.1071ms
[debug]   Load.apply: structureIndex took 1996.491ms
[debug]   Load.apply: mkStreams took 116.3983ms
[info] loading global plugins from C:\Users\SAK\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] In the last 181 seconds, 5.592 (3.1%) were spent in GC. [Heap: 1.07GB free of 1.24GB, max 1.50GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.
[debug] Forcing garbage collection...
[warn] In the last 385 seconds, 173.559 (45.1%) were spent in GC. [Heap: 0.22GB free of 0.31GB, max 1.50GB] Consider increasing the JVM heap using `-Xmx` or try a different collector, e.g. `-XX:+UseG1GC`, for better performance.
[debug] Load.defaultLoad until apply took 388775.719ms
[debug]           Load.loadUnit: plugins took 1377.9061ms
[debug]           Load.loadUnit: defsScala took 0.0163ms
[debug] [Loading] Scanning directory C:\Users\SAK\IdeaProjects\DS_SpellChecker\project
[debug]             Load.loadUnit: mkEval took 130.7311ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\SAK\IdeaProjects\DS_SpellChecker\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.9998 ms
[info] loading settings for project ds_spellchecker-build from idea.sbt ...
[debug]               Load.resolveProject(ds_spellchecker-build) took 11.3144ms
[debug]             Load.loadTransitive: finalizeProject(Project(id ds_spellchecker-build, base: C:\Users\SAK\IdeaProjects\DS_SpellChecker\project, plugins: List(<none>))) took 14.2118ms
[debug] [Loading] Done in C:\Users\SAK\IdeaProjects\DS_SpellChecker\project, returning: (ds_spellchecker-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 5125.4609ms
[debug]           Load.loadUnit: cleanEvalClasses took 174.6242ms
[debug]         Load.loadUnit(file:/C:/Users/SAK/IdeaProjects/DS_SpellChecker/project/, ...) took 6680.0847ms
[debug]       Load.apply: load took 6682.9253ms
[debug]       Load.apply: resolveProjects took 0.2078ms
[debug]       Load.apply: finalTransforms took 10.629ms
[debug]       Load.apply: config.delegates took 0.5126ms
[debug]       Load.apply: Def.make(settings)... took 825.0395ms
[debug]       Load.apply: structureIndex took 26.8459ms
[debug]       Load.apply: mkStreams took 0.0077ms
[info] loading project definition from C:\Users\SAK\IdeaProjects\DS_SpellChecker\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 12908.8616ms
[debug]     Load.loadUnit: defsScala took 0.0073ms
[debug] [Loading] Scanning directory C:\Users\SAK\IdeaProjects\DS_SpellChecker
[debug]       Load.loadUnit: mkEval took 0.7549ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\SAK\IdeaProjects\DS_SpellChecker, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(List(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin))), Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin))), Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin))), Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin))), Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin))), Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 2.2415 ms
[info] loading settings for project ds_spellchecker from build.sbt ...
[debug]         Load.resolveProject(ds_spellchecker) took 315.1572ms
[debug]       Load.loadTransitive: finalizeProject(Project(id ds_spellchecker, base: C:\Users\SAK\IdeaProjects\DS_SpellChecker, plugins: List(<none>))) took 318.8052ms
[debug] [Loading] Done in C:\Users\SAK\IdeaProjects\DS_SpellChecker, returning: (ds_spellchecker)
[debug]     Load.loadUnit: loadedProjectsRaw took 17138.9051ms
[debug]     Load.loadUnit: cleanEvalClasses took 159.7235ms
[debug]   Load.loadUnit(file:/C:/Users/SAK/IdeaProjects/DS_SpellChecker/, ...) took 30208.9134ms
[debug] Load.apply: load took 30212.0083ms
[debug] Load.apply: resolveProjects took 0.3048ms
[debug] Load.apply: finalTransforms took 83.6062ms
[debug] Load.apply: config.delegates took 0.3407ms
[debug] Load.apply: Def.make(settings)... took 353.9671ms
[debug] Load.apply: structureIndex took 345.819ms
[debug] Load.apply: mkStreams took 0.0083ms
[warn] Discarding 1 session setting.  Use 'session save' to persist session settings.
[info] set current project to DS_SpellChecker (in build file:/C:/Users/SAK/IdeaProjects/DS_SpellChecker/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(set _root_.org.jetbrains.sbt.StructureKeys.sbtStructureOptions in Global := "download resolveClassifiers resolveSbtClassifiers", None, None)
[info] Defining Global / sbtStructureOptions
[info] The new value will be used by Global / ssOptions
[debug] Defining 
[debug] 	Global / sbtStructureOptions
[debug] 
[debug] The new value will be used by 
[debug] 	Global / ssOptions
[info] Reapplying settings...
[info] set current project to DS_SpellChecker (in build file:/C:/Users/SAK/IdeaProjects/DS_SpellChecker/)
[debug] > Exec(*/*:dumpStructureTo C:/Users/SAK/AppData/Local/Temp/sbt-structure.xml, None, None)
[debug] Evaluating tasks: Global / dumpStructureTo
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] There may be incompatibilities among your library dependencies; run 'evicted' to see detailed eviction warnings.
[warn] There may be incompatibilities among your library dependencies; run 'evicted' to see detailed eviction warnings.
[info] Writing structure to C:\Users\SAK\AppData\Local\Temp\sbt-structure.xml...
[info] Done.
[debug] Forcing garbage collection...
[success] Total time: 612 s (10:12), completed 19-Apr-2021, 10:37:26 PM
[debug] > Exec(session clear-all, None, None)
[info] Reapplying settings...
[info] set current project to DS_SpellChecker (in build file:/C:/Users/SAK/IdeaProjects/DS_SpellChecker/)
[debug] > Exec(set ideaPort in Global := 57722, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to DS_SpellChecker (in build file:/C:/Users/SAK/IdeaProjects/DS_SpellChecker/)
[debug] > Exec(idea-shell, None, None)
[debug] > Exec(, None, None)
[debug] > Exec(idea-shell, None, None)
